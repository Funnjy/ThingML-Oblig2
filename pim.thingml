/* ThingML Framework */

// Base datatypes
import "datatypes.thingml"

// Import everything in core [where is core?]
// import "core/scheduler.thingml"
// import "core/timer.thingml"

/* PSM must be included */
import "psm_sim.thingml"
import "psm_datatypes_sim.thingml"
import "pim_messages.thingml"
import "timer.thingml"
import "ClockStuff.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg, TimerMsgs/*, ClockStuff*/ {
	provided port from_CS{
		receives tp_info
	}
	
	provided port get_sensor {
		receives temperature
	}
	required port request_sensor {
		sends add_thermometer, set_polling_interval
	}
	required port request_actuator{
		sends add_device, SwitchOn, SwitchOff, add_period
	}
	provided port human_input {
		receives add_thermometer, add_device, SwitchOn, SwitchOff, set_temperature,/* add_period,*/ set_polling_interval,set_time,prompt
	}
	required port human_output {
		sends temperature, prompt
	}
	required port time_input{
		receives set_time
	}
	
	//timer ports - it does not hold to include TimerClient since it only has one port and therefore cannot distinguish between two timers
	required port guard_temperature
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
	required port guard_human
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
	required port time_periods{
		receives timer_timeout
		sends timer_start, timer_cancel
	}
	required port guard_time_periods{
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
	property tmrature:Double = 20 // the requested temperature for the room
	property thermo_id:Integer // the single thermometer identifier
	property thermo_n:String //The single thermometer name
	property switch_id:Integer // the single on-off switch identifier	
	property lasttemp:Double = 0 // the last temperature recorded, buffering one measurement
	
	//Oblig 2 variabler
	/*Help varibles*/
	property ant_t:Integer = 0 //Number of thermos
	property ant_d:Integer = 0 //Number of devices
	property i:Integer = 0 //make sure it's set to 0 all the time
	property temptemp:Double = 0
	property guard_temp:Double = 0
	property capacity:Integer = 10 //kapasitet til arrays
	/*Thermometer variabler*/
	property tid_array:Integer[capacity] //Id til thermometers
	property tname_array:String[capacity] //names til thermometers
	property twight_array:Double[capacity] //wight til termometre
	property ttemp_array:Double[capacity] //temperature til themrometre
	/*THermometer functions*/
	function tid_check(tid:Integer):Integer do	//Funksjonene sjekker om verdiene er gyldig.
		if(tid <= 0)do
			human_output!prompt("Thermo ID can't be zero or negative number")
			return 1
		end		
		return -1
	end
	function set_tinfo(tid:Integer, tname:String, twight:Double, ttemp:Double, id_array:Integer[capacity]):Boolean do 	//Funksjonen tarr inn alle verdiene Ã¥ setter dem inn i arrays. 
		if(tparameter_check(tid,twight,ttemp) == 1) do
			i = get_tid_e_pos(id_array)
			set_id(tid, i, id_array)
			set_name(tid, tname, tname_array, id_array)
			set_weight(tid, twight, id_array)
			return true
		end
		i = 0
		human_output!prompt("ALERT: Please control parameters. One or more parameters for device is invalid. Adding of device is blocked.")
		return false
	end
	
	function tparameter_check(tid:Integer, twight:Double, ttemp:Double):Integer do 
		if(tid_array[capacity-1] != 0)do human_output!prompt("ALERT: There are no empty positions. 10 of 10 thermometers added.") return -1 end
		if(tid <= 0) do	human_output!prompt("ALERT: ID parameter is invalid. ID must be greater then 0.") return -1 end //Check if ID > 0
		if(tid_u_check(tid, tid_array) == 1)do human_output!prompt("ALERT: ID must be unique. Thermometer with given ID already exists. Please try another ID.") return -1 end //Check if ID already exist
		if(twight <= 0)do human_output!prompt("ALERT: Thermometer weight cannot be 0 or less then 0.") return -1	end //Check if wight > 0 
		if(ttemp < -40 and ttemp > 50)do human_output!prompt("ALERT: Temperature cannot be less then -40 or more then 50.") return -1 end //Check if temperature is in valid range
		return 1
	end
	
	function tid_u_check(tid:Integer, arr:Integer[capacity]):Integer do //Check if ID is unique
		i = 0
		while(i < capacity)do
			if(arr[0] == 0) return -1 
			if(tid == arr[i]) return 1
			i = i + 1
		end
		i = 0
		return -1
	end
	
	function set_id(id:Integer, e_pos:Integer, id_array:Integer[capacity]) do //Set id into array tid_array
		id_array[e_pos] = id
	end
	
	function set_name(id:Integer, name:String, arr:String[capacity], id_array:Integer[capacity]) do //Set name into array tname_array
 		i = id_pos(id, id_array)
		arr[i] = name
		i = 0
 	end
 	
	function set_weight(tid:Integer, wight:Double, id_array:Integer[]) do i = id_pos(tid, id_array)		twight_array[i] = wight i = 0	end //*Set wight that are == to ID
	function set_wtemp(tid:Integer, temp:Double, id_array:Integer[]) do i = id_pos(tid, id_array)		ttemp_array[i] = temp * twight_array[i]	i = 0 end 	//Set calculated(temp*weight) 
	function calc_temp(tid:Integer, temp:Double, w:Double):Double do //calculates temperatured with weights
		i = id_pos(tid, tid_array)
		temptemp = ttemp_array[i]*twight_array[i]
		i = 0
		return temptemp
	end
	
	function calc_all_temp():Double do // Sum of all calculated temperatures
		temptemp = 0
		i = 0
		while(i < capacity)do
			temptemp = temptemp + ttemp_array[i]
			i = i + 1
		end
		i = 0
		return temptemp
	end
	
	function id_pos(id:Integer, id_arr:Integer[]):Integer do	//Return position to given ID
		i = 0
		while( i < capacity) do 
			if(id_arr[i] == id) return i
			i = i + 1
		end 
		i = 0
		return -1
	end
	
	function get_tid_e_pos(arr:Integer[]):Integer do 	//Return first empty position in tid_array[] 
		i = 0
		while(i < capacity) do
			if(arr[i] == 0) do
				return i
			end
			i = i + 1 
		end
		i = 0
		return -1
	end	
	
	/*Device variabls*/
	property did_array:Integer[capacity] //Id beholder
	property dname_array:String[capacity] //Name beholder
	property dcat_array:Integer[capacity] //Category beholder 
	/*Device functions*/
	function show_all_devices()do //Temp function to list all devices
		i = 0
		while(i < capacity)do
			print("Device ID: ")print(did_array[i])print(" Device Name: ")print(dname_array[i])print(" Device category: ")print(dcat_array[i])print("\n")
			i = i + 1
		end
	end
	function set_dinfo(did:Integer, name:String, dcat:Integer):Integer do //Set new device
		if(dparameter_check(did, dcat) == 1)do
			i = get_did_e_pos()
			set_id(did, i, did_array)
			set_dname(did, name)
			set_dcat(did, dcat)
			i = 0
			while(i < capacity)do
				print("ID: ")print(did_array[i])print(" cat: ")print(dcat_array[i])print("\n")
				i = i +1
			end
			i = 0
			return 1
		end
		human_output!prompt("ALERT: Please control parameters. One or more parameters for device is invalid. Adding of device is blocked.")
		return -1
	end
	
	function dparameter_check(did:Integer, dcat:Integer):Integer do//check if parameters is valid
		if(did_array[capacity-1] != 0) do human_output!prompt("ALERT: There are no empty positions. 10 of 10 devices added.") return -1 end //Have empty positions?
		if(did <= 0)do human_output!prompt("ALERT: ID parameter is invalid. ID must be greater then 0.") return -1 end	//Check that ID have right 
		if(tid_u_check(did, did_array) == 1) do human_output!prompt("ALERT: ID must be unique. Device with given ID already exists. Please try another ID.") return -1 end 
		if(dcat <= 0 and dcat >= 3) do human_output!prompt("ALERT: Device category can have one of following parameters: 1, 2 or 3.") return -1 end
		return 1
	end
	
	function set_dname(did:Integer, dname:String) do i = id_pos(did,did_array) i = id_pos(did, did_array)	dname_array[i] = dname i = 0 end 	//set name into dname_array
	function set_dcat(did:Integer, dcat:Integer) do i = e_pos_d(did)  i = id_pos(did, did_array)	dcat_array[i] = dcat i = 0 end	//set dcat into dcat_array
	function e_pos_d(did:Integer):Integer do //return position of gien ID
	i = 0
		while( i < capacity) do 
			if(tid_array[i] == did) return i
			i = i + 1
		end 
		i = 0
		return -1 
	end
	
	function get_did_e_pos():Integer do //return first empty position in did_array
		i = 0
		while(i < capacity)do
			if(did_array[i] == 0)do
				return i
			end
			i = i + 1
		end
		i = 0
		return -1
	end

	function switch_allheat_off()do
		i = 0
		while(i < capacity)do
			if(dcat_array[i] == 1)do
				request_actuator!SwitchOff(did_array[i])
			end
			i = i + 1
		end
		i = 0	
	end
	
	function switch_allheat_on()do
		i = 0
		while(i < capacity)do
			if(dcat_array[i] == 1)do
				request_actuator!SwitchOn(did_array[i])
			end
			i = i + 1
		end
		i = 0
	end
	
	function heater_behavior():Boolean do 
		i = 0
		if(cs_device_behavior[0] == 0)do //0 for OFF, cs_device_behavior[0] for heater controls
			while(i < capacity)do
				if(dcat_array[i] == 1)do
					request_actuator!SwitchOff(did_array[i])
				end
				i = i + 1
			end
			return true
		end
		if(cs_device_behavior[0] == 1)do //1 for ON, cs_device_behavior[0] for heater controls
			while(i < capacity)do
				if(dcat_array[i] == 1)do
					request_actuator!SwitchOn(did_array[i])
				end
				i = i + 1
			end
			return true
		end	
		if(cs_device_behavior[0] == 2)do //2 for Thermostat, cs_device_behavior[0] for heater controls
			while(i < capacity)do
				if(dcat_array[i] == 1)do
					return false
				end	i = i + 1
			end
			return false
		end
		i = 0
		return false
	end//heater_behavior function
	
	function actuators_behavior()do
		i = 0
		if(cs_device_behavior[1] == 0/*TODO boolean*/)do
			while(i < capacity)do
				if(dcat_array[i] == 2)do
					request_actuator!SwitchOff(did_array[i])
				end	i = i + 1
			end
		end
		i = 0
		if(cs_device_behavior[2] == 0/*TODO boolean*/)do
			while(i < capacity)do
				if(dcat_array[i] == 3)do
					request_actuator!SwitchOff(did_array[i])
				end	i = i + 1
			end
		end
		i = 0
		if(cs_device_behavior[1] == 1/*TODO boolean*/)do
			while(i < capacity)do
				if(dcat_array[i] == 2)do
					request_actuator!SwitchOn(did_array[i])
				end	i = i + 1
			end
		end
		i = 0
		if(cs_device_behavior[2] == 1/*TODO boolean*/)do
			while(i < capacity)do
				if(dcat_array[i] == 3)do
					request_actuator!SwitchOn(did_array[i])
				end	i = i + 1
			end
		end
		i = 0
	end//Actuators_behavior function
	
	//Variables from ClockStuff that should chenge behavior of actuators
	property cs_minmax:Double[2]
	property cs_device_behavior:Integer[3]
	
	statechart PIM_behavior init Build {
		composite state Build init AddThermo keeps history {
		on entry guard_human!timer_start(30000) // 30s to do the whole build 
		on exit guard_human!timer_cancel()
			
			state AddThermo {
				transition -> AddThermo
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
					request_sensor!add_thermometer(thermo_id,addt.txt, addt.w)
					set_tinfo(thermo_id, addt.txt, addt.w, 0.0, tid_array)		
					human_output!prompt("Please add switch device or more thermometers. Up to 10 thermometers can be added.") // SIMULATION: prompting on console for the user to react properly
					ant_t = ant_t + 1
				end
				transition -> AddThermo // Cover other messages
				//event human_input?add_device
				event human_input?SwitchOn
				event human_input?SwitchOff
				event human_input?set_temperature
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add at least 1 thermometer first! You can add up to 10 thermometers.")
				end
				// temperature is handled on Build level
				
				transition -> AddThermo
				event human_input?add_device
				guard ant_t == 0 
				action do
					human_output!prompt("Please add at least 1 thermometer first! You can add up to 10 thermometers.")
				end
				
				transition -> AddDevice
				event adddev:human_input?add_device
				guard ant_t > 0
				action do 
					set_dinfo(adddev.did, adddev.name, adddev.cat)
					request_actuator!add_device(adddev.did, adddev.name, adddev.cat)
					ant_d = ant_d + 1
					show_all_devices()
					human_output!prompt("Please add more switch devices or give thermostat temperature setting")
				end
			}
			state AddDevice {
				transition -> AddDevice
				event adddev:human_input?add_device
				guard ant_d <= 10
				action do
					id_pos(adddev.did,did_array)
					set_dinfo(adddev.did, adddev.name, adddev.cat)				
					request_actuator!add_device(adddev.did,adddev.name, adddev.cat)
					ant_d = ant_d + 1
					show_all_devices()
					human_output!prompt("Please add more switch devices or give thermostat temperature setting") // SIMULATION: prompting on console for the user to react properly
				end
				transition -> AddDevice
				event human_input?SwitchOn
				event human_input?SwitchOff
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometer(s) already added, add one or more devices. Up to 10 devices can be added.")
				end
				// temperature and set_temperature handled on Build level
				
			}
			
			state SetThermostat {
				// Here the only message we want is the set_temperature, but this is on one level up to move to Running
				transition -> SetThermostat
				event human_input?add_thermometer
				event human_input?add_device
				event human_input?SwitchOn
				event human_input?SwitchOff
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
			}
			
			// Normal transition to the Running state
			transition -> Running
			event set_temp:human_input?set_temperature
			action do
				tmrature = set_temp.t
				human_output!prompt("Now entering thermostat. Please give temperature observations") // SIMULATION: prompting on console for the user to react properly
			end
			
			//Escape situations
			transition -> Build
			event get_sensor?temperature
			action do 
				// just discard, the thermostat is not running, yet (161103)
			end
			transition -> Build
			event tpinfo:from_CS?tp_info
			action do
				//just discard, the thermostat is not running, yet (161103)
			end

			transition -> Build
			event tmout:guard_human?timer_timeout
			action do
				human_output!prompt("Please continue doing the build of the temperature control")
			end
		} // end Build
				
		composite state Running init Thermostat keeps history {
			
			composite state Thermostat init TemprDecide {  // notice that we are not keeping history, we do not know whether to turn on or off
				state TemprDecide {
				on entry guard_temperature!timer_start(15000)  // hardcoded 15s to get the next temperature 
				on exit guard_temperature!timer_cancel()
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard guard_temp>=tmrature-cs_minmax[0]//1  // We choose switch OFF as much as we can here
					action do
						set_wtemp(temp2.id, temp2.t,tid_array)
						guard_temp = calc_all_temp()
					 	if(heater_behavior() == false) do switch_allheat_off() end
						actuators_behavior()
						lasttemp = guard_temp
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard guard_temp<tmrature-cs_minmax[0]//1
					action do
						set_wtemp(temp2.id, temp2.t,tid_array)
						guard_temp = calc_all_temp()						
						if(heater_behavior() == false) do switch_allheat_on() end
						actuators_behavior()
						lasttemp = guard_temp
					end
					
					transition -> TemprDecide
					event timout:guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprDecide - temperature measurement is delayed")
					end
				}
				
				state TemprIncrease{ // Invariant: Switch is ON and temperature should increase
				on entry guard_temperature!timer_start(15000)
				on exit guard_temperature!timer_cancel()
				
					transition -> TemprIncrease 
					event temp:get_sensor?temperature
					guard guard_temp<=tmrature+cs_minmax[1]//1
					action do
						set_wtemp(temp.id, temp.t,tid_array)
						guard_temp = calc_all_temp()
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
						if (lasttemp>guard_temp)do
							if(heater_behavior() == false) do switch_allheat_on()	end	 // the temperature is still falling even though switch should be ON, reactivate
							actuators_behavior()
						end
						lasttemp = guard_temp
					end
					
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard guard_temp>tmrature+cs_minmax[1]//1 
					action do
						set_wtemp(temp2.id, temp2.t,tid_array)
						guard_temp = calc_all_temp()
						if(heater_behavior() == false) do switch_allheat_off()	end
						actuators_behavior()
						lasttemp = guard_temp						
					end
					
					transition -> TemprIncrease
					event timout:guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprIncrease - temperature measurement is delayed")						
					end
				}

				state TemprDecrease{ // Invariant: Switch is OFF and temperature should decrease
				on entry guard_temperature!timer_start(15000) 
				on exit guard_temperature!timer_cancel()
				
					transition-> TemprDecrease
					event temp:get_sensor?temperature
					guard guard_temp>=tmrature-cs_minmax[0]//1
					action do
						set_wtemp(temp.id, temp.t,tid_array)
						guard_temp = calc_all_temp()
						// TRACING to follow thermostat print("TempDecrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
						if (lasttemp<guard_temp) do
							if(heater_behavior() == false) do switch_allheat_off() end  // the temperature is still rising even though switch should be OFF, reactivate
							actuators_behavior()	
						end
						lasttemp = guard_temp						
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard guard_temp<tmrature-cs_minmax[0]//1
					action do
						set_wtemp(temp2.id, temp2.t,tid_array)
						guard_temp = calc_all_temp()
						if(heater_behavior() == false) do switch_allheat_on()	end
						actuators_behavior()
						lasttemp = guard_temp
					end
					
					transition -> TemprDecrease
					event timout:guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprDecrease - temperature measurement is delayed")
					end
				}

				transition -> On
				event swon:human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end 
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end 
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
			} // end Thermostat
			
			state On {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> On
				event temp:get_sensor?temperature
				action do
					if (lasttemp>temp.t) request_actuator!SwitchOn(switch_id) // temperature is falling even when ON. Reactivate.
					lasttemp = temp.t
				end
				transition -> Thermostat
				event tpinfo:from_CS?tp_info
				action do
				cs_minmax[0] = tpinfo.c_min //Minimal comfort temperature
				cs_minmax[1] = tpinfo.c_max	//Maximal comfort temperature
				cs_device_behavior[0] = tpinfo.c1_b //Device category 1 behavior
				cs_device_behavior[1] = tpinfo.c2_b	//Device category 1 behavior
				cs_device_behavior[2] = tpinfo.c3_b	//Device category 1 behavior
				human_output!prompt("Device behavior variables got an updated!")
				human_output!prompt("Minimum comfort temperature: " + cs_minmax[0] 	
								+ ", maximum comfort temperature: " + cs_minmax[1] 
								+ ", device category 1 is set to be: " + cs_device_behavior[0] 
								+ ", device category 2 is set to be: " + cs_device_behavior[1]
								+ ", device category 3 is set to be: " + cs_device_behavior[2] 
								+ ". Where 0=OFF, 1=ON and 2=thermostat modus." )
				//print(cs_minmax[0])print(" ")print(cs_device_behavior[0])
				end
			}
			state Off {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end	
				transition -> Off
				event temp:get_sensor?temperature
				action do
					if (lasttemp<temp.t) request_actuator!SwitchOff(switch_id) // temperature is rising even when OFF. Reactivate.
					lasttemp = temp.t
				end
				transition -> Thermostat
				event tpinfo:from_CS?tp_info
				action do
				cs_minmax[0] = tpinfo.c_min //Minimal comfort temperature
				cs_minmax[1] = tpinfo.c_max	//Maximal comfort temperature
				cs_device_behavior[0] = tpinfo.c1_b //Device category 1 behavior
				cs_device_behavior[1] = tpinfo.c2_b	//Device category 1 behavior
				cs_device_behavior[2] = tpinfo.c3_b	//Device category 1 behavior
				human_output!prompt("Device behavior variables got an updated!")
				human_output!prompt("Minimum comfort temperature: " + cs_minmax[0] 	
								+ ", maximum comfort temperature: " + cs_minmax[1] 
								+ ", device category 1 is set to be: " + cs_device_behavior[0] 
								+ ", device category 2 is set to be: " + cs_device_behavior[1]
								+ ", device category 3 is set to be: " + cs_device_behavior[2] 
								+ ". Where 0=OFF, 1=ON and 2=thermostat modus." )
				//print(cs_minmax[0])print(" ")print(cs_device_behavior[0])
				end
			}
			transition -> Running
			event tpinfo:from_CS?tp_info
			action do
				cs_minmax[0] = tpinfo.c_min //Minimal comfort temperature
				cs_minmax[1] = tpinfo.c_max	//Maximal comfort temperature
				cs_device_behavior[0] = tpinfo.c1_b //Device category 1 behavior
				cs_device_behavior[1] = tpinfo.c2_b	//Device category 1 behavior
				cs_device_behavior[2] = tpinfo.c3_b	//Device category 1 behavior
				human_output!prompt("Device behavior variables got an updated!")
				human_output!prompt("Minimum comfort temperature: " + cs_minmax[0] 	
								+ ", maximum comfort temperature: " + cs_minmax[1] 
								+ ", device category 1 is set to be: " + cs_device_behavior[0] 
								+ ", device category 2 is set to be: " + cs_device_behavior[1]
								+ ", device category 3 is set to be: " + cs_device_behavior[2] 
								+ ". Where 0=OFF, 1=ON and 2=thermostat modus." )
				//print(cs_minmax[0])print(" ")print(cs_device_behavior[0])
			end
			// Transitions of the composite state Running
			transition -> Running
			event pollint:human_input?set_polling_interval
			action do
				// just forward the polling interval instructions to the PSM
				request_sensor!set_polling_interval(pollint.intrvl)
			end
			
			// Messages that should not occur
			transition -> Running
			event human_input?add_thermometer
			event human_input?add_device
			action do
				human_output!prompt("Adding gadgets has been done and then blocked")
			end			
			// Messages the cannot occur - since they are always handled
			transition -> Running
			event human_input?SwitchOn
			event human_input?SwitchOff
			event human_input?set_temperature
			action do
				human_output!prompt("INTERNAL ERROR: Impossible messages at PIM.Running")
			end		
			transition -> Running
			event temp:get_sensor?temperature
			action do
				human_output!prompt("INTERNAL ERROR: temperature received at PIM.Running")
				lasttemp = temp.t
			end
		} // end Running
	} // end PIM_behavior
} // end PIM thing

